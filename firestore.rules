rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // PRODUTOS: documentos de produto (metadados e subcoleções)
    match /products/{productId} {
      allow read: if request.auth != null;

      // Criação e atualização de produto (meta) somente por admin
      allow create: if request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      allow update: if request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      allow delete: if request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Variants e SKUs são controlados abaixo por regras mais finas
    }

    // VARIANTES (subcoleção)
    match /products/{productId}/variants/{variantId} {
      allow read: if request.auth != null;

      // Somente admin cria/edita/ apaga variantes
      allow create, update, delete: if request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // SKUs (controle fino): PDV pode atualizar apenas o campo 'stock'; admin pode tudo.
    match /products/{productId}/variants/{variantId}/skus/{skuId} {
      allow read: if request.auth != null;

      // Criar e apagar: admin somente
      allow create, delete: if request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Update: admin total; pdv só pode atualizar stock e somente como inteiro >= 0
      allow update: if request.auth != null && (
        // Admin full update
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
        ||
        // PDV: only stock field
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pdv'
          && request.resource.data.keys().hasOnly(['stock'])
          && request.resource.data.stock is int
          && request.resource.data.stock >= 0
        )
      );
    }

    // UTILIZADORES: leitura do próprio perfil ou admin; criação pelo próprio (signup); updates com proteção de role
    match /users/{userId} {
      allow read: if request.auth != null &&
        (request.auth.uid == userId
         || (get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));

      // Permite criar documento de perfil apenas se for o próprio usuário (signup)
      allow create: if request.auth != null && request.auth.uid == userId;

      // Update: usuário pode atualizar seu perfil, mas não pode alterar a role (role permanece igual)
      allow update: if request.auth != null && (
        // Admin pode tudo
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
        ||
        // Usuário pode editar seu perfil desde que não altere a role
        (request.auth.uid == userId
          && (request.resource.data.role == resource.data.role))
      );

      // Apagar/permissões de listagem: apenas admin
      allow delete, list: if request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // VENDAS: PDV e admin podem criar; leitura/edição por admin ou dono da venda
    match /sales/{saleId} {
      allow create: if request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
        && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pdv'
            || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      allow read, update: if request.auth != null && (
        // Admin
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
        ||
        // Owner of sale (userId stored in sale document)
        (resource.data.userId == request.auth.uid)
      );

      // Delete: somente admin
      allow delete: if request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).exists
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Fallback: negar tudo mais explicitamente
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
